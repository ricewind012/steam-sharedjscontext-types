export interface g_GRS {
	m_bClipLoadingTriggered: boolean;
	m_bEnoughDiskSpace: boolean;
	m_bLoadingAppsWithTimelines: boolean;
	m_bLoadingClips: boolean;
	m_clipExportProgress: {
		changeListeners_: any;
		data_: {};
		dehancer: any;
		enhancer_(...args: any[]);
		hasMap_: {};
		interceptors_: any;
		keysAtom_: {
			diffValue_: number;
			isBeingObserved: boolean;
			isPendingUnobservation: boolean;
			lastAccessedBy_: number;
			lowestObserverState_: number;
			name_: string;
			observers_: Set<any>;
			onBOL: any;
			onBUOL: any;

			function();
			function();
			function();
			function();
			function();
		};
		name_: string;

		function(e, t);
		function();
		function(e);
		function(e);
		function();
		function(e, t);
		function(e);
		function(e);
		function(e);
		function(e);
		function();
		function(e);
		function(e, t);
		function(e);
		function(e, t);
		function();
		function();
		function(e, t);
		function();
	};
	m_clips: {
		changeListeners_: any;
		data_: {};
		dehancer: any;
		enhancer_(...args: any[]);
		hasMap_: {};
		interceptors_: any;
		keysAtom_: {
			diffValue_: number;
			isBeingObserved: boolean;
			isPendingUnobservation: boolean;
			lastAccessedBy_: number;
			lowestObserverState_: number;
			name_: string;
			observers_: Set<any>;
			onBOL: any;
			onBUOL: any;

			function();
			function();
			function();
			function();
			function();
		};
		name_: string;

		function(e, t);
		function();
		function(e);
		function(e);
		function();
		function(e, t);
		function(e);
		function(e);
		function(e);
		function(e);
		function();
		function(e);
		function(e, t);
		function(e);
		function(e, t);
		function();
		function();
		function(e, t);
		function();
	};
	m_clipsGroupByGame: {
		changeListeners_: any;
		data_: {};
		dehancer: any;
		enhancer_(...args: any[]);
		hasMap_: {};
		interceptors_: any;
		keysAtom_: {
			diffValue_: number;
			isBeingObserved: boolean;
			isPendingUnobservation: boolean;
			lastAccessedBy_: number;
			lowestObserverState_: number;
			name_: string;
			observers_: Set<any>;
			onBOL: any;
			onBUOL: any;

			function();
			function();
			function();
			function();
			function();
		};
		name_: string;

		function(e, t);
		function();
		function(e);
		function(e);
		function();
		function(e, t);
		function(e);
		function(e);
		function(e);
		function(e);
		function();
		function(e);
		function(e, t);
		function(e);
		function(e, t);
		function();
		function();
		function(e, t);
		function();
	};
	m_currentlyExportingClip: any;
	m_fnGetAchievementInfo(...args: any[]);
	m_mapActiveTimelines: {};
	m_mapClipLoaders: {};
	m_mapManualRecordingCallbacks: {};
	m_mapSharedClipLoaders: {};
	m_mapTimelineLoaders: {};
	m_recordingState: any;
	m_rgAppsWithTimelines: any[];
	m_strLastClipID: any;
	m_transport: {
		MakeReady(...args: any[]);
		SendMsg(e, t, r);
		SendNotification(e, t);
	};

	BEnoughDiskSpace();
	BLoadingAppsWithTimelines();
	BLoadingClips();
	BShouldReloadAppsWithTimelines(e, t);
	CheckEnoughDiskSpace(): Promise<any>;
	GetAppsWithTimelines();
	GetAppsWithTimelinesWithVideo();
	GetAvailableDiskSpace(): Promise<any>;
	GetBestClipTitle(e);
	GetClipExportProgress(e);
	GetClipIDs(e);
	GetClipSummaries(e);
	GetClipSummariesForGame(e);
	GetClipSummary(e);
	GetCurrentExportingClip();
	GetLastClip();
	GetRecordingState();
	GetTotalDiskSpaceUsage(e, t): Promise<any>;
	Init(e, t): Promise<any>;
	InternalAddClipSummary(e);
	LazyLoadClips(): Promise<any>;
	LoadAppsWithTimelines(): Promise<any>;
	ManuallyDeleteRecordingForApps(e);
	ReloadAppsWithTimelinesIfNeeded(e);
	ReportClipRange(e, t, r, n, i);
	ReportClipShare(e, t, r, n, i);
}
