export interface RemotePlayStore_SteamUI {
	m_bAudioDriverDialogVisible: boolean;
	m_bInputDriverDialogVisible: boolean;
	m_bInputDriverRestartNoticeVisible: boolean;
	m_bRemoteDeviceClientPairingDialogVisible: boolean;
	m_bRemoteDeviceHostPairingDialogVisible: boolean;
	m_bRestrictedSession: boolean;
	m_clientConfig: {
		array: any[];
		arrayIndexOffset_: number;
		convertedPrimitiveFields_: {};
		messageId_: any;
		pivot_: number;
		wrappers_: any;

		function(r, i);
		function();
		function();
		function();
		function();
		function();
		function();
		function();
		function();
		function(r = !0);
		function();
		function();
		function();
		function();
		function();
		function();
		function();
		function();
		function();
		function();
		function();
		getClassName();
		function();
		function();
		function(r = !0);
		function(r = !0);
		serializeBase64String();
		serializeBinary();
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		toObject(e = !1);
	};
	m_devices: any[];
	m_sRemoteDeviceBeingPaired: any;
	m_sRemoteDevicePairingPIN: any;
	m_serverConfig: {
		array: boolean[];
		arrayIndexOffset_: number;
		convertedPrimitiveFields_: {};
		messageId_: any;
		pivot_: number;
		wrappers_: any;

		function();
		function();
		function();
		function();
		function();
		function();
		function();
		function();
		getClassName();
		function();
		serializeBase64String();
		serializeBinary();
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function(r);
		function();
		toObject(e = !1);
	};
	m_setAdditionalParentalBlocks: {
		atom_: {
			diffValue_: number;
			isBeingObserved: boolean;
			isPendingUnobservation: boolean;
			lastAccessedBy_: number;
			lowestObserverState_: number;
			name_: string;
			observers_: Set<object>;
			onBOL: any;
			onBUOL: any;

			function();
			function();
			function();
			function();
			function();
		};
		changeListeners_: any;
		data_: Set<any>;
		dehancer: any;
		enhancer_(...args: any[]);
		interceptors_: any;
		name_: string;

		function(e);
		function();
		function(e);
		function(e);
		function(e);
		function();
		function(e, t);
		function(e);
		function(e);
		function(e);
		function(e);
		function(e);
		function(e);
		function();
		function(e, t);
		function(e);
		function(e);
		function();
		function();
		function(e);
		function();
	};
	m_settings: {
		RemotePlayClientConfig: {};
		RemotePlayServerConfig: {};
		bRemotePlayClientConfigEnabled: boolean;
		bRemotePlayDisabledBySystemPolicy: boolean;
		bRemotePlayEnabled: boolean;
		bRemotePlayServerConfigAvailable: boolean;
		bRemotePlayServerConfigEnabled: boolean;
		bRemotePlaySupported: boolean;
		eRemotePlayP2PScope: number;
		nAutomaticResolutionX: number;
		nAutomaticResolutionY: number;
		nDefaultAudioChannels: number;
		strStreamingClientName: string;
		unStreamingSessionID: number;
	};

	BHasParentalBlock(e);
	BHasParentalBlocks();
	GetStreamingFormFactors();
	HideAudioDriverDialog();
	HideInputDriverDialog();
	HideInputDriverRestartNotice();
	HideRemoteDeviceClientPairingDialog();
	HideRemoteDeviceHostPairingDialog();
	Init(e);
	ShowAudioDriverDialog();
	ShowInputDriverDialog();
	ShowInputDriverRestartNotice();
	ShowRemoteDeviceClientPairingDialog(e);
	ShowRemoteDeviceHostPairingDialog(e);
}
