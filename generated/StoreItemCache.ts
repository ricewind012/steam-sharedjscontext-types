export interface StoreItemCache {
	k_AlreadyResolvedBusy: {};
	k_AlreadyResolvedInvalid: {};
	k_AlreadyResolvedOK: {};
	k_QueueWaitUntilRequestMS: number;
	k_nMaxBatchSize: number;
	m_PendingInfoPromise: any;
	m_PendingInfoResolve: any;
	m_PendingTimer: any;
	m_SteamInterface: {
		ClientServersAvailableHandler: { invoke(...args: any[]); unregister() };
		m_ServiceTransport: {
			MakeReady(...args: any[]);
			SendMsg(e, t, r);
			SendNotification(e, t);
		};
		m_bCompletedInitialConnect: boolean;
		m_bConnected: boolean;
		m_bConnectionFailed: boolean;
		m_bForceDisconnect: boolean;
		m_bLoggedOn: boolean;
		m_bPerformedInitialClockAdjustment: boolean;
		m_callbacksOnConnect: {
			m_ClientConnectionCallbacks: {
				m_vecCallbacks: function[];

				ClearAllCallbacks();
				CountRegistered();
				Dispatch(...e);
				Register(e);
			};
			m_bRunOnce: boolean;
			m_mapServerTypeCallbacks: {};

			AddCallback(e, t);
			RunAllCallbacks(e, ...t);
			RunCallbacks(e, ...t);
		};
		m_callbacksOnConnectOneTime: {
			m_ClientConnectionCallbacks: {
				m_vecCallbacks: any[];

				ClearAllCallbacks();
				CountRegistered();
				Dispatch(...e);
				Register(e);
			};
			m_bRunOnce: boolean;
			m_mapServerTypeCallbacks: {};

			AddCallback(e, t);
			RunAllCallbacks(e, ...t);
			RunCallbacks(e, ...t);
		};
		m_callbacksOnDisconnect: {
			m_ClientConnectionCallbacks: {
				m_vecCallbacks: function[];

				ClearAllCallbacks();
				CountRegistered();
				Dispatch(...e);
				Register(e);
			};
			m_bRunOnce: boolean;
			m_mapServerTypeCallbacks: {};

			AddCallback(e, t);
			RunAllCallbacks(e, ...t);
			RunCallbacks(e, ...t);
		};
		m_hEMsgRegistrationObserver(...args: any[]);
		m_hSharedConnection: number;
		m_messageHandlers: {
			m_ErrorReportingStore: {
				m_bEnabled: boolean;
				m_bInitialized: boolean;
				m_rgErrorQueue: any[];
				m_sendTimer: any;
				m_strProduct: string;
				m_strVersion: string;
				m_transport: {
					MakeReady(...args: any[]);
					SendMsg(e, t, r);
					SendNotification(e, t);
				};

				BIsBlacklisted(e);
				Init(e, t, r);
				QueueSend(e);
				ReportError(e, t): Promise<any>;
				SendErrorReport(e);
				SendErrorReports(e);
			};
			m_mapCallbacks: {};
			m_mapServiceMethodHandlers: {};
			m_rgRegisteredEMsgs: number[];
			m_rgRegisteredServiceMethodHandlers: string[];

			AddCallback(e, t, r);
			AddServiceMethodHandler(e, t);
			AddServiceNotificationHandler(e, t);
			DEBUG_LogMessageDispatch(e, t);
			DispatchMsgToHandlers(e, t);
			InstallErrorReportingStore(e);
			RegisterBaseEMessageHandler(e, t);
			RegisterEMessageAction(e, t, r);
			RegisterEMessageHandler(e, t, r);
			RegisterServiceMethodHandler(e, t);
			RegisterServiceMethodHandlerAction(e, t);
			RegisterServiceNotificationHandler(e, t);
			RegisterServiceNotificationHandlerAction(e, t);
		};
		m_nPerfClockServerMSOffset: number;
		m_nWallClockDriftMS: number;
		m_onConnect: {};
		m_rtReconnectThrottleExpiration: number;
		m_rtReconnectThrottleStart: number;
		m_setConnectedServers: Set<number>;
		m_setEMsgHandlers: Set<number>;
		m_setServiceMethodHandlers: Set<string>;
		m_steamid: {
			m_ulSteamID: {
				high: number;
				low: number;
				unsigned: boolean;

				function(e);
				function(e);
				function();
				function(e);
				function(e);
				function();
				function();
				function();
				function(e);
				function(e);
				function(e);
				function(e);
				function();
				function(e);
				function();
				function();
				function();
				function();
				function();
				function(e);
				function(e);
				function(e);
				function(e);
				function();
				function();
				function();
				function();
				function();
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function();
				function();
				function(e);
				function();
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function(e);
				function();
				function();
				function();
				function();
				function();
				function(e);
				function();
				function(e);
			};

			BIsClanAccount();
			BIsIndividualAccount();
			BIsValid();
			ConvertTo64BitString();
			GetAccountID();
			GetAccountType();
			GetInstance();
			GetUniverse();
			Render();
			SetAccountID(e);
			SetAccountType(e);
			SetFromComponents(e, t, r, i);
			SetInstance(e);
			SetUniverse(e);
		};
		m_strIPCountry: string;
		m_strPersonaName: string;
		m_unAccountFlags: number;

		ClearHeartbeatInterval();
		Connect();
		Disconnect();
		OnConnect();
		OnLogonInfoChanged(e);
		OnMsgRecvd(e);
		OnSharedConnectionClosed();
		OnSharedConnectionEstablished(e);
		ResetHeartbeatInterval();
		SendHeartbeat();
		SendInternal(e);
		SendMsgAndAwaitResponse(e, t);
	};
	m_bActivelyResettingCache: boolean;
	m_bInitialized: boolean;
	m_bReturnUnavailableItems: boolean;
	m_bUsePartnerAPI: boolean;
	m_mapApps: {};
	m_mapAppsInFlight: {};
	m_mapBundleInFlight: {};
	m_mapBundles: {};
	m_mapCreators: {};
	m_mapCreatorsInFlight: {};
	m_mapHubCategories: {};
	m_mapHubCategoriesInFlight: {};
	m_mapPackageInFlight: {};
	m_mapPackages: {};
	m_mapTags: {};
	m_mapTagsInFlight: {};
	m_setPendingAppInfo: Set<any>;
	m_setPendingBundleInfo: Set<any>;
	m_setPendingCreatorInfo: Set<any>;
	m_setPendingDataRequest: {};
	m_setPendingHubCategoryInfo: Set<any>;
	m_setPendingPackageInfo: Set<any>;
	m_setPendingTagInfo: Set<any>;
	m_setUnavailableApps: Set<number>;
	m_setUnavailableBundles: Set<any>;
	m_setUnavailableCreators: Set<any>;
	m_setUnavailableDueToCountryRestrictionApps: Set<number>;
	m_setUnavailableDueToCountryRestrictionBundles: Set<any>;
	m_setUnavailableDueToCountryRestrictionPackages: Set<any>;
	m_setUnavailableHubCategories: Set<any>;
	m_setUnavailablePackages: Set<any>;
	m_setUnavailableTags: Set<any>;

	BHasApp(e, t);
	BHasBundle(e, t);
	BHasCreator(e, t);
	BHasHubCategory(e, t);
	BHasPackage(e, t);
	BHasStoreItem(e, t, r);
	BHasTag(e, t);
	BIsAppMissing(e);
	BIsAppUnavailableDueToCountryRestriction(e);
	BIsBundleMissing(e);
	BIsBundleUnavailableDueToCountryRestriction(e);
	BIsCreatorMissing(e);
	BIsHubCategoryMissing(e);
	BIsPackageMissing(e);
	BIsPackageUnavailableDueToCountryRestriction(e);
	BIsStoreItemMissing(e, t);
	BIsStoreItemUnavailableDueToCountryRestriction(e, t);
	BIsTagMissing(e);
	FlushPendingInfo(): Promise<any>;
	GetApp(e);
	GetBundle(e);
	GetCreator(e);
	GetHubCategory(e);
	GetMapForType(e);
	GetPackage(e);
	GetPreviousSupersetLoadPromise(e, t, r);
	GetReturnUnavailableItems();
	GetSteamInterface();
	GetStoreItem(e, t);
	GetStoreItemDataRequest(e, t);
	GetStoreItemWithLegacyVisibilityCheck(e, t);
	GetTag(e);
	HintLoadStoreApps(e, t): Promise<any>;
	HintLoadStoreBundles(e, t): Promise<any>;
	HintLoadStoreItems(e, t, r, n, i, a, s, o): Promise<any>;
	HintLoadStorePackages(e, t): Promise<any>;
	InternalHandleLoadStoreItems(e, t, r): Promise<any>;
	MarkStoreItemIDUnavailable(e);
	QueueAppRequest(e, t): Promise<any>;
	QueueBundleRequest(e, t): Promise<any>;
	QueueCreatorRequest(e, t): Promise<any>;
	QueueHubCategoryRequest(e, t): Promise<any>;
	QueueMultipleAppRequests(e, t): Promise<any>;
	QueueMultipleBundleRequests(e, t): Promise<any>;
	QueueMultipleCreatorRequests(e, t): Promise<any>;
	QueueMultipleHubCategoryRequests(e, t): Promise<any>;
	QueueMultiplePackageRequests(e, t): Promise<any>;
	QueueMultipleStoreItemRequests(e, t, r): Promise<any>;
	QueueMultipleTagRequests(e, t): Promise<any>;
	QueuePackageRequest(e, t): Promise<any>;
	QueueStoreItemRequest(e, t, r): Promise<any>;
	QueueTagRequest(e, t): Promise<any>;
	ReadItem(e, t);
	ReadResults(e, t);
	ResetCache(): Promise<any>;
	SetReturnUnavailableItems(e);
	SetSteamInterface(e);
	SortStoreItems(e);
}
